library(e1071)
dataDirectory <- "C:/Program Files/MetaTrader 4 Admiral Markets AS DAX/MQL4/Files/"
dataLoad <- read.csv(paste(dataDirectory, 'NZDUSD240.csv', sep=""), header = TRUE)
Diff <- (c(30))
for(i in 1:30){

data <- dataLoad[i:(i+19),]
test <- dataLoad[i+20,]



rmse <- function(error)
{
  sqrt(mean(error^2))
}

# svr model ==============================================
if(require(e1071)){
  
  
  model <- svm(Y ~ X , data)
  
  predictedY <- predict(model, data)
  
  #points(data$X, predictedY, col = "red", pch=17)
  
  
  error <- data$Y - predictedY  # /!\ this time  svrModel$residuals  is not the same as data$Y - predictedY
  svrPredictionRMSE <- rmse(error)  # 3.157061 
  
    
  tuneResult <- tune(svm, Y ~ X,  data = data, 
                ranges = list(epsilon = seq(0,1,0.1), cost = 2^(2:9))
  ) 
  print(tuneResult) # best performance
   
  
  tuneResult <- tune(svm, Y ~ X,  data = data, 
                     ranges = list(epsilon = seq(0,0.2,0.01), cost = 2^(2:9))
  ) 
  
  print(tuneResult) 
  
  
  
  tunedModel <- tuneResult$best.model
  tunedModelY <- predict(tunedModel, data) 
  
  
  
  error <- data$Y - tunedModelY  
  
  # this value can  be different because the best model is determined by cross-validation over randomly shuffled data 
  tunedModelRMSE <- rmse(error)  # 2.219642 
} 

FX <- predict(tunedModel, newdata = test)
print(test)
print(FX)
Diff(i) <- (test[1,2]-FX)*10000
print(Diff)

}
# end of Close model =======================================

dataDirectory <- "C:/Program Files/MetaTrader 4 Admiral Markets AS DAX/MQL4/Files/"
dataLoad <- read.csv(paste(dataDirectory, 'NZDUSDV240.csv', sep=""), header = TRUE)
Diff <- (c(30))
for(i in 1:30){

data <- dataLoad[i:(i+19),]
test <- dataLoad[i+20,]



rmse <- function(error)
{
  sqrt(mean(error^2))
}

# svr model ==============================================
dataDirectory <- "C:/Program Files/MetaTrader 4 Admiral Markets AS DAX/MQL4/Files/"
dataLoad <- read.csv(paste(dataDirectory, 'NZDUSDVVol.csv', sep=""), header = TRUE)
Diff <- (c(30))
for(i in 1:30){

data <- dataLoad[i:(i+19),]
test <- dataLoad[i+20,]

if(require(e1071)){
  
  
  model <- svm(Y ~ X , data)
  
  predictedY <- predict(model, data)
  
  #points(data$X, predictedY, col = "red", pch=17)
  
  
  error <- data$Y - predictedY  # /!\ this time  svrModel$residuals  is not the same as data$Y - predictedY
  svrPredictionRMSE <- rmse(error)  # 3.157061 
  
    
  tuneResult <- tune(svm, Y ~ X,  data = data, 
                ranges = list(epsilon = seq(0,1,0.1), cost = 2^(2:9))
  ) 
  print(tuneResult) # best performance
   
  
  tuneResult <- tune(svm, Y ~ X,  data = data, 
                     ranges = list(epsilon = seq(0,0.2,0.01), cost = 2^(2:9))
  ) 
  
  print(tuneResult) 
  
  
  
  tunedModel <- tuneResult$best.model
  tunedModelY <- predict(tunedModel, data) 
  
  
  
  error <- data$Y - tunedModelY  
  
  # this value can  be different because the best model is determined by cross-validation over randomly shuffled data 
  tunedModelRMSE <- rmse(error)  # 2.219642 
} 

FX <- predict(tunedModel, newdata = test)
print(test)
print(FX)
Diff(i) <- (test[1,2]-FX)*10000
print(Diff)

}
# end of Vol model =======================================
