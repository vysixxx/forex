library(e1071)
dataDirectory <- "C:/Program Files/MetaTrader 4 Admiral Markets AS DAX/MQL4/Files/"
dataLoad <- read.csv(paste(dataDirectory, 'NZDUSD240.csv', sep=""), header = TRUE)
Diff <- (c(30))
UpOrDown <- (c(30))
realPrice <- 1:40
dim(realPrice) <- c(20,2)
predPrice <- 1:40
dim(predPrice) <- c(20,2)
predPriceVol <- 1:40
dim(predPriceVol) <- c(20,2)

for(i in 1:20){

data <- dataLoad[i:(i+4),]
test <- dataLoad[i+5,]

 

rmse <- function(error)
{
  sqrt(mean(error^2))
}

# svr model ==============================================
if(require(e1071)){
  
  
  model <- svm(Y ~ X , data)
  
  predictedY <- predict(model, data)
  
  #points(data$X, predictedY, col = "red", pch=17)
  
  
  error <- data$Y - predictedY  # /!\ this time  svrModel$residuals  is not the same as data$Y - predictedY
  svrPredictionRMSE <- rmse(error)  # 3.157061 
  
    
  tuneResult <- tune(svm, Y ~ X,  data = data, 
                ranges = list(epsilon = seq(0,1,0.1), cost = 2^(2:9))
  ) 
  print(tuneResult) # best performance
   
  
  tuneResult <- tune(svm, Y ~ X,  data = data, 
                     ranges = list(epsilon = seq(0,0.2,0.01), cost = 2^(2:9))
  ) 
  
  print(tuneResult) 
  
  
  
  tunedModel <- tuneResult$best.model
  tunedModelY <- predict(tunedModel, data) 
  
  
  
  error <- data$Y - tunedModelY  
  
  # this value can  be different because the best model is determined by cross-validation over randomly shuffled data 
  tunedModelRMSE <- rmse(error)  # 2.219642 
} 

FX <- predict(tunedModel, newdata = test)
print(test)
print(FX)
Diff[i] <- (test[1,2]-FX)*10000
print(Diff)
realPrice[i,2] <- test[1,2]
predPrice[i,2] <- FX


if(((dataLoad[i+10,2]>dataLoad[i+9,2]) && (FX>dataLoad[i+9,2]))||((dataLoad[i+10,2]<dataLoad[i+9,2]) && (FX<dataLoad[i+9,2]))){
		UpOrDown[i] <- 1}
else{UpOrDown[i] <- 0}

}
# end of Close model =======================================
plot(realPrice,type="l")
points(predPrice,pch=20,col="red")

# Vol model ==============================================
dataDirectory <- "C:/Program Files/MetaTrader 4 Admiral Markets AS DAX/MQL4/Files/"
dataLoad <- read.csv(paste(dataDirectory, 'NZDUSDVol240.csv', sep=""), header = TRUE)

DiffV <- (c(30))
for(i in 1:20){

data <- dataLoad[i:(i+4),]
test <- dataLoad[i+5,]

rmse <- function(error)
{
  sqrt(mean(error^2))
}

if(require(e1071)){
  
  
  model <- svm(Y ~ X , data)
  
  predictedY <- predict(model, data)
  
  #points(data$X, predictedY, col = "red", pch=17)
  
  
  error <- data$Y - predictedY  # /!\ this time  svrModel$residuals  is not the same as data$Y - predictedY
  svrPredictionRMSE <- rmse(error)  # 3.157061 
  
    
  tuneResult <- tune(svm, Y ~ X,  data = data, 
                ranges = list(epsilon = seq(0,1,0.1), cost = 2^(2:9))
  ) 
  print(tuneResult) # best performance
   
  
  tuneResult <- tune(svm, Y ~ X,  data = data, 
                     ranges = list(epsilon = seq(0,0.2,0.01), cost = 2^(2:9))
  ) 
  
  print(tuneResult) 
  
  
  
  tunedModel <- tuneResult$best.model
  tunedModelY <- predict(tunedModel, data) 
  
  
  
  error <- data$Y - tunedModelY  
  
  # this value can  be different because the best model is determined by cross-validation over randomly shuffled data 
  tunedModelRMSE <- rmse(error)  # 2.219642 
} 

FX <- predict(tunedModel, newdata = test)
print(test)
print(FX)
DiffV[i] <- (test[1,2]-FX)*10000
print(DiffV)

}
# end of Vol model =======================================
HitUD <- (sum(UpOrDown)/length(UpOrDown))*100
avgDiffClose <- (sum(abs(Diff))/length(Diff))
avgDiffCloseVol <- (sum(abs(DiffV))/length(DiffV))
message("uspesnost predpovedi smeru dle Close: ", HitUD,"%")
message("prumerna odchylka podle Close: ", avgDiffClose,"pips")
message("prumerna odchylka podle volatility: ", avgDiffCloseVol,"pips")
data.frame(test=c(1:20),Diff=c(Diff),DiffV=c(DiffV),UoD=c(UpOrDown))
